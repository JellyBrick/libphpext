#include "../core.h"

phpext::value test_function_1(phpext::parameters& params) {
	phpext::callable fn = params[0];
	return fn("abc");
}

class test_class_1: public phpext::class_base {
public:
	phpext::value test_method_1(phpext::parameters& params) {
		return params[0];
	}
};

extern "C" {
	PHP_CORE_EXPORT zend_module_entry* get_module() {
		static phpext::extension extension(EXTENSION_NAME, EXTENSION_VERSION);
		extension.add("core_test.test_ini_key", "default_value1");
		// extension.add(phpext::constant("fs\\constant_1", "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"));
		extension.add<test_function_1>("core_test\\test_function_1", {
		 	{"argv1", true, false}
		});
		// extension.add<test_feature_2>("fs\\test_feature_2", {
		// 	{"argv1", true, true}
		// });
		// extension.add<test_string_1>("fs\\test_string_1");
		// extension.add<test_string_2>("fs\\test_string_2");

		phpext::class_entry<test_class_1> test_class_1_entry("fs\\test_class_1");
		test_class_1_entry.property("test_prop", "test string for test_prop val");
		test_class_1_entry.contant("TEST_CONST", "test string for TEST_CONST val");
		test_class_1_entry.add<&test_class_1::test_method_1>("test_method_1");
		extension.add(std::move(test_class_1_entry));
		return extension;
	}
}
